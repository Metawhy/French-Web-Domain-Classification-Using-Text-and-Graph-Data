   Le blog d'Eskimon (BUTTON)

   Arduino Articles Web

   Arduino
   Faire communiquer son Arduino avec un appareil AndroidRéaliser un
   télémètre à ultrasonsTP Arduino : Faire une animation Space Invaders
   sur LCD
     * A - Découverte de l'Arduino
          + Présentation d’Arduino
          + Quelques bases élémentaires
          + Le logiciel
          + Le matériel
          + Le langage Arduino (1/2)
          + Le langage Arduino (2/2)
     * B - Gestion des entrées - sorties
          + Notre premier programme !
          + Introduire le temps
          + TP Feux de signalisation routière
          + Un simple bouton
          + Afficheurs 7 segments
          + [TP] Parking
     * C - La communication avec Arduino
          + Généralités sur la voie série
          + Envoyer et recevoir des données sur la voie série
          + [TP] Baignade interdite !
          + [Annexe] Ordinateur et voie série dans un autre langage de
            programmation
     * D - Les grandeurs analogiques
          + Les entrées analogiques de l’Arduino
          + [TP] Vu-mètre à LED
          + Et les sorties “analogiques”, enfin… presque !
          + [Exercice] Une animation “YouTube”
     * E - Les capteurs et l'environnement autour d'Arduino
          + Des capteurs plus évolués
          + Différents types de mesures
          + Généralités sur les capteurs
     * F - Le mouvement grâce aux moteurs
          + Un moteur qui a de la tête : le Servomoteur
          + A petits pas, le moteur pas-à-pas
          + Le moteur à courant continu
     * G - L'affichage, une autre manière d'interagir
          + Les écrans LCD
          + Votre premier texte sur le LCD !
          + [TP] Supervision avec un LCD
     * H - Internet of Things : Arduino sur Internet
          + Découverte de l'Ethernet sur Arduino
          + Arduino et Ethernet : client
          + Arduino et Ethernet : serveur
     * I - Annexes
          + Alimenter une Arduino sans USB
          + Gestion de la mémoire sur Arduino
          + Ajouter des sorties numériques à l'Arduino, le 74HC595
          + Les ports
          + Organiser votre code en fichiers
          + Utiliser Sublime Text comme IDE
          + Utiliser un module Bluetooth HC-05 avec Arduino

   Articles
   How to embed a Tinkercad simulatorComment partager un simulateur
   tinkercadGuake, un terminal drop-down qu'il est bien.Remettre à zéro
   les migrations d'un projet DjangoUtiliser un gestionnaire de mot de
   passeFaire un gif de son écran sous Ubuntu avec byzanzComment (et
   pourquoi) j'ai intégré ZMarkdown à PelicanRefaire l'histoire avec
   gitAjouter un splash screen de boot sur sa RaspberryPiAfficher une
   image avec Qt (zoom, déplacement, redimensionnement, tool-tip, menu
   contextuel ...)Les outils du bon bricoleurLes suites de design
   électroniques[TEST] ElectroDroidRaspberryPi Compute, une carte qui
   change (presque) tout !Scrapheap Challenge, l’émission télé qui va vous
   plaire !
   Web
   Passer son serveur à l'httpSSécuriser son serveur avec UFWFaire un bot
   Discord simple avec les webhooksSimple flask cache busterDes cartes sur
   votre siteLes balises audio et vidéo en HTML5Google Maps JavaScript API
   V3
     * A - Présentation de Pelican
          + Pelican : pourquoi ?
          + Pelican : comment ?
     * B - Générons nos premières pages
          + Hello World!
          + Les métadonnées
          + Différents formats de contenu, un seul rendu
          + Changer le style des pages - les thèmes
     * C - Customisons le rendu de notre site
          + Principe
          + La base
          + Page de « listing »
          + Rendu d'un article
          + [TP] Page d'accueil
     * D - Aller plus loin
          + Utiliser des plugins
          + Quelques paramètres de configuration

   © Eskimon - Blog propulsé par Pelican - Thème fait maison

   [p?c1=2&c2=20015427&cv=2.0&cj=1]

   Quantcast
   Le blog d'Eskimon (BUTTON)

   Arduino Articles Web

42 articles dans la catégorie [Arduino]

Faire communiquer son Arduino avec un appareil Android

   jeu. 24 août 2017
   Dans ce tutoriel porté sur Android et Arduino, nous allons connecter
   ces deux mondes géniaux.

Réaliser un télémètre à ultrasons

   sam. 28 mai 2016
   Apprenons à réaliser un télémètre à ultrasons grâce à une Arduino et un
   petit module complémentaire

TP Arduino : Faire une animation Space Invaders sur LCD

   sam. 28 mai 2016
   Comment s’amuser à faire un pseudo écran de veille sur un écran LCD
   d’Arduino

Découverte de l'Ethernet sur Arduino

   jeu. 26 mars 2015
   Pour accéder à internet et au monde extérieur avec notre Arduino, nous
   allons utiliser le shield Ethernet. Voyons le protocole éponyme sur
   lequel il repose.
   ( H - Internet of Things : Arduino sur Internet )

Arduino et Ethernet : client

   jeu. 26 mars 2015
   Commençons la découverte du shield Ethernet en l'utilisant comme client
   et aller lire des pages/services web avec notre Arduino.
   ( H - Internet of Things : Arduino sur Internet )

Arduino et Ethernet : serveur

   ven. 16 janvier 2015
   Dans ce chapitre, nous utiliserons l'Arduino et son shield Ethernet en
   mode serveur pour offrir des données. Bienvenue dans l'"Internet Of
   Things" (IoT)
   ( H - Internet of Things : Arduino sur Internet )

Alimenter une Arduino sans USB

   sam. 22 mars 2014
   Je vous propose dans ce mini-tutoriel de vous passer de l'USB pour
   alimenter votre Arduino. Vous allez voir, plusieurs solutions simples
   existent.
   ( I - Annexes )

Des capteurs plus évolués

   mer. 05 mars 2014
   Dernier chapitre pour parler de capteurs plus évolués renvoyant des
   informations plus compliquées à traiter.
   ( E - Les capteurs et l'environnement autour d'Arduino )

Différents types de mesures

   mer. 26 février 2014
   Dans ce chapitre, nous allons parler mesure pour les capteurs simples.
   Mesure de tension, de résistance ou d'état logique.
   ( E - Les capteurs et l'environnement autour d'Arduino )

Généralités sur les capteurs

   mer. 19 février 2014
   Ce chapitre vous propose de partir à l'assaut des capteurs, qui
   permettra à votre arduino de "ressentir" le monde qui l'entoure.
   ( E - Les capteurs et l'environnement autour d'Arduino )

Gestion de la mémoire sur Arduino

   mer. 05 février 2014
   Cette nouvelle annexe vous propose de partir à la découverte des
   différentes mémoires embarquées sur Arduino. Flash, RAM et ROM n'auront
   plus de secret !
   ( I - Annexes )

Un moteur qui a de la tête : le Servomoteur

   jeu. 12 décembre 2013
   Dans cette partie, voyons comment interfacer un servo-moteur avec
   Arduino. Étudions aussi ses particularités et comment il fonctionne.
   ( F - Le mouvement grâce aux moteurs )

A petits pas, le moteur pas-à-pas

   jeu. 12 décembre 2013
   Cette partie traite du fonctionnement des différents moteurs pas-à-pas
   et comment les interfacer avec une carte Arduino.
   ( F - Le mouvement grâce aux moteurs )

Le moteur à courant continu

   jeu. 12 décembre 2013
   Première partie sur les moteurs qui va vous donner les connaissances
   mécaniques et électroniques pour bien utiliser ces derniers puis
   appliquer avec Arduino
   ( F - Le mouvement grâce aux moteurs )

Ajouter des sorties numériques à l'Arduino, le 74HC595

   mer. 11 décembre 2013
   14 sorties numériques sur une Arduino Uno c'est peu. Voyons comment
   avec un composant simple, le 74HC595, nous pouvons multiplier ces
   dernières.
   ( I - Annexes )

Les entrées analogiques de l’Arduino

   mer. 11 décembre 2013
   Cette première partie se propose de vous faire découvrir les entrées
   analogiques des microcontrôleurs puis celle de l'Arduino en
   particulier.
   ( D - Les grandeurs analogiques )

[TP] Vu-mètre à LED

   mer. 11 décembre 2013
   Un nouvel exercice pour bien mettre en pratique les convertisseurs
   analogiques - numériques de l'Arduino.
   ( D - Les grandeurs analogiques )

Et les sorties “analogiques”, enfin… presque !

   mer. 11 décembre 2013
   Voyons comment utiliser les sorties "analogiques" (soi-disant ;) ) de
   l'Arduino.
   ( D - Les grandeurs analogiques )

[Exercice] Une animation “YouTube”

   mer. 11 décembre 2013
   Un TP consacré à l'application des connaissances relatives à la gestion
   des entrées/sorties analogiques de l'Arduino en réalisant une petite
   animation.
   ( D - Les grandeurs analogiques )

Les écrans LCD

   mer. 11 décembre 2013
   Les écrans LCD sont partout, mais savez-vous comment ils fonctionnent ?
   Découvrons le ensemble avant de les utiliser avec notre Arduino.
   ( G - L'affichage, une autre manière d'interagir )

Votre premier texte sur le LCD !

   mer. 11 décembre 2013
   L'aspect théorique est maîtrisé ? Passons à la pratique en affichant
   nos premiers textes sur l'écran LCD avec les bonnes fonctions de
   l'Arduino.
   ( G - L'affichage, une autre manière d'interagir )

[TP] Supervision avec un LCD

   mer. 11 décembre 2013
   Comme un bon chapitre ne va pas sans son TP, voici un exercice de mise
   en place d'un écran LCD avec l'Arduino.
   ( G - L'affichage, une autre manière d'interagir )

Présentation d’Arduino

   mar. 10 décembre 2013
   Comment faire de l'électronique en utilisant un langage de
   programmation ? La réponse, c'est le projet Arduino qui l'apporte.
   ( A - Découverte de l'Arduino )

Quelques bases élémentaires

   mar. 10 décembre 2013
   Découvrons les bases élementaires de ce framework en parlant du
   matériel et du logiciel qui le compose.
   ( A - Découverte de l'Arduino )

Le logiciel

   mar. 10 décembre 2013
   Après l'introduction précédente, rentrons maintenant dans le détail en
   parlant du logiciel qui permet d'utiliser la carte Arduino.
   ( A - Découverte de l'Arduino )

Le matériel

   mar. 10 décembre 2013
   Maintenant que le logiciel est installé, passons à la découverte de la
   carte Arduino du côté du matériel embarqué.
   ( A - Découverte de l'Arduino )

Le langage Arduino (1/2)

   mar. 10 décembre 2013
   L'Arduino est maîtrisé ? Alors voyons maintenant ensemble le b-a-ba de
   la programmation (1/2)
   ( A - Découverte de l'Arduino )

Le langage Arduino (2/2)

   mar. 10 décembre 2013
   L'Arduino est maîtrisé ? Alors voyons maintenant ensemble le b-a-ba de
   la programmation (2/2)
   ( A - Découverte de l'Arduino )

Notre premier programme !

   mar. 10 décembre 2013
   Maintenant que le langage et ses spécificité est connu, réalisons notre
   premier programme en utilisant un premier composant : la LED.
   ( B - Gestion des entrées - sorties )

Introduire le temps

   mar. 10 décembre 2013
   Le temps s'écoule aussi dans la carte Arduino... Voyons comment le
   dompter !
   ( B - Gestion des entrées - sorties )

TP Feux de signalisation routière

   mar. 10 décembre 2013
   C'est l'heure du premier TP pour tester vos connaissances sur Arduino.
   Au programme, une mise en situation sur un carrefour avec des LEDs
   ( B - Gestion des entrées - sorties )

Un simple bouton

   mar. 10 décembre 2013
   Agir c'est bien, réagir c'est mieux. Interagissons avec l'Arduino grâce
   à des boutons.
   ( B - Gestion des entrées - sorties )

Afficheurs 7 segments

   mar. 10 décembre 2013
   Faire de l'affichage avec des LEDs c'est un bon début. Voyons
   maintenant comment faire quelque chose de plus complet avec des
   afficheurs 7 segments.
   ( B - Gestion des entrées - sorties )

[TP] Parking

   mar. 10 décembre 2013
   Il est temps de mettre vos connaissances à rude épreuve en réalisant
   cette maquette de parking avec votre fidèle Arduino !
   ( B - Gestion des entrées - sorties )

Généralités sur la voie série

   mar. 10 décembre 2013
   La communication... que ferait-on sans ! Nous allons voir un moyen de
   communication simple que possède la carte Arduino : la voie série.
   ( C - La communication avec Arduino )

Envoyer et recevoir des données sur la voie série

   mar. 10 décembre 2013
   Grâce au chapitre précédent, vous savez tout sur la communication via
   la voie série. Voyons maintenant les fonctions du framework Arduino
   pour l'utiliser.
   ( C - La communication avec Arduino )

[TP] Baignade interdite !

   mar. 10 décembre 2013
   Comm d'habitude, voici un TP pour mettre en place les nouvelles
   connaissances. Ici il sera bien sur question de la voie série Arduino -
   ordinateur.
   ( C - La communication avec Arduino )

[Annexe] Ordinateur et voie série dans un autre langage de programmation

   mar. 10 décembre 2013
   Utiliser la voie série c'est bien, le faire avec un langage que l'on
   maîtrise c'est mieux ! Voici quelques démonstration avec des langages
   populaires.
   ( C - La communication avec Arduino )

Les ports

   ven. 03 décembre 2010
   Un microcontrôleur possède plein de mémoires particulières que l'on
   appelle des registres. Découvrons via un exemple servant à gérer les
   I/O : les ports.
   ( I - Annexes )

Organiser votre code en fichiers

   ven. 03 décembre 2010
   Diviser pour mieux régner... C'est on ne peut plus vrai pour ce
   mini-tuto qui vous explique comment séparer votre code en différents
   fichiers sur Arduino.
   ( I - Annexes )

Utiliser Sublime Text comme IDE

   ven. 03 décembre 2010
   Coder pour Arduino c'est bien, coder avec un IDE correct c'est mieux !
   Découvrons comment utiliser Sublime Text pour développer sur notre
   Arduino.
   ( I - Annexes )

Utiliser un module Bluetooth HC-05 avec Arduino

   ven. 03 décembre 2010
   Dans cette annexe du tutoriel Arduino, nous allons apprendre à utiliser
   et configurer un module bluetooth HC-05 pour donner du sans fil à
   l'Arduino.
   ( I - Annexes )

   © Eskimon - Blog propulsé par Pelican - Thème fait maison

   [p?c1=2&c2=20015427&cv=2.0&cj=1]

   Quantcast
   Le blog d'Eskimon (BUTTON)

   Arduino Articles Web

15 articles dans la catégorie [Articles]

How to embed a Tinkercad simulator

   lun. 10 juin 2019
   This post will describe the two easy steps to embed a Tinkercad circuit
   simulator on any webpage

Comment partager un simulateur tinkercad

   lun. 10 juin 2019
   Voici un petit article pour vous expliquer comment facilement partager
   un circuit électronique réalisé sous Tinkercad

Guake, un terminal drop-down qu'il est bien.

   dim. 12 mai 2019
   Dans cette article je souhaite vous faire découvrir un terminal que
   j'utilise depuis maintenant quelques années : Guake.

Remettre à zéro les migrations d'un projet Django

   lun. 29 avril 2019

Utiliser un gestionnaire de mot de passe

   dim. 04 novembre 2018
   Apprendre à utiliser le gestionnaire de mot de passe quand on y connaît
   pas grand chose en informatique.

Faire un gif de son écran sous Ubuntu avec byzanz

   lun. 18 juin 2018
   Comment faire un gif de son écran sous Ubuntu à l'aide du logiciel
   byzanz

Comment (et pourquoi) j'ai intégré ZMarkdown à Pelican

   mer. 11 avril 2018
   Tuto-Billet sur la puissance du Zeste

Refaire l'histoire avec git

   sam. 12 novembre 2016
   Utilisation avancée de git et sa commande rebase.

Ajouter un splash screen de boot sur sa RaspberryPi

   mar. 29 mars 2016
   Ajouter un splash screen de boot sur sa RaspberryPi

Afficher une image avec Qt (zoom, déplacement, redimensionnement, tool-tip,
menu contextuel ...)

   dim. 13 septembre 2015

Les outils du bon bricoleur

   mar. 22 juillet 2014
   Vous allez enfin avoir du temps pour bricoler ? Avant de se jeter corps
   et âme dans le monde merveilleux du DIY, il est bien de s’équiper des
   bons outils !

Les suites de design électroniques

   mer. 21 mai 2014
   Passons en revue quelques logiciels permettant de réaliser des circuits
   électroniques, du niveau amateur à professionnel...

[TEST] ElectroDroid

   mer. 07 mai 2014
   Cet article vous propose de partir à la découverte de l'application
   ElectroDroid, une vraie boîte à outils de l'électronicien, pour
   appareil Android.

RaspberryPi Compute, une carte qui change (presque) tout !

   ven. 03 décembre 2010
   Parlons un peu de la nouvelle carte RaspberryPi Compute, qui tient sur
   un format SODIMM et permet plus d'interactions électroniques !

Scrapheap Challenge, l’émission télé qui va vous plaire !

   ven. 03 décembre 2010
   Scrapheap challenge est une jeu télévisé anglais. 2 équipes s'affrontes
   pour réaliser des machines construite dans une casse automobile.

   © Eskimon - Blog propulsé par Pelican - Thème fait maison

   [p?c1=2&c2=20015427&cv=2.0&cj=1]

   Quantcast
   Le blog d'Eskimon (BUTTON)

   Arduino Articles Web

20 articles dans la catégorie [Web]

Passer son serveur à l'httpS

   lun. 08 juillet 2019
   Voyons comment installer un certificat let's encrypt pour protéger
   notre trafic http

Sécuriser son serveur avec UFW

   lun. 08 juillet 2019
   Commentre mettre en oeuvre simplement le parefeu UFW (Uncomplicated
   FireWall)

Faire un bot Discord simple avec les webhooks

   dim. 09 juin 2019
   Un petit bot Discord en python, sans bibliothèque et sans se prendre la
   tête !

Simple flask cache buster

   mer. 12 décembre 2018
   This article is gonna show how to implement a rather simple cache
   buster, without using query parameters

Pelican : pourquoi ?

   sam. 27 octobre 2018
   Partons à la découverte du générateur de site statique qu'est Pelican.
   ( A - Présentation de Pelican )

Pelican : comment ?

   sam. 27 octobre 2018
   Voyons comment faire pour installer et utiliser basiquement Pelican.
   ( A - Présentation de Pelican )

Hello World!

   sam. 27 octobre 2018
   Le classique, première page Hello World générée avec Pelican.
   ( B - Générons nos premières pages )

Les métadonnées

   sam. 27 octobre 2018
   Agrementons notre contenu d'informations avec les métadonnées.
   ( B - Générons nos premières pages )

Différents formats de contenu, un seul rendu

   sam. 27 octobre 2018
   Markdown, rst, html... La rédaction sous toute ses formes dans Pelican.
   ( B - Générons nos premières pages )

Changer le style des pages - les thèmes

   sam. 27 octobre 2018
   Du contenu c'est bien, du joli contenu c'est mieux. Personnalisons
   l'aspect de notre site avec les thèmes de Pelican.
   ( B - Générons nos premières pages )

Principe

   sam. 27 octobre 2018
   Principe de création et d'utilisation des thèmes dans Pelican.
   ( C - Customisons le rendu de notre site )

La base

   sam. 27 octobre 2018
   Posons les fondations du thème de notre site internet avec Pelican.
   ( C - Customisons le rendu de notre site )

Page de « listing »

   sam. 27 octobre 2018
   Auteurs, articles, tags, gérons les listes dans notre thème Pelican.
   ( C - Customisons le rendu de notre site )

Rendu d'un article

   sam. 27 octobre 2018
   Le coeur de notre site, les articles. Personnalisons les avec notre
   thème Pelican.
   ( C - Customisons le rendu de notre site )

[TP] Page d'accueil

   sam. 27 octobre 2018
   Place à la mise en pratique. Exercice de réalisation de la page
   d'accueil de notre thème Pelican.
   ( C - Customisons le rendu de notre site )

Utiliser des plugins

   sam. 27 octobre 2018
   Augmentons les capacités de notre générateur, voyons comment facilement
   installer des plugins dans Pelican.
   ( D - Aller plus loin )

Quelques paramètres de configuration

   sam. 27 octobre 2018
   Concluons ce tutoriel en passant en revue quelques paramètres bien
   utiles pour configurer Pelican.
   ( D - Aller plus loin )

Des cartes sur votre site

   sam. 12 novembre 2016
   Apprenons à utiliser Leaflet pour embarquer des cartes géographiques
   sur un site

Les balises audio et vidéo en HTML5

   sam. 12 novembre 2016
   Le multimédia avec HTML 5 et les balises audio et vidéo.

Google Maps JavaScript API V3

   sam. 28 mai 2016
   Ajouter des informations sur les fonds de carte Google.

   © Eskimon - Blog propulsé par Pelican - Thème fait maison

   [p?c1=2&c2=20015427&cv=2.0&cj=1]

   Quantcast
   Le blog d'Eskimon (BUTTON)

   Arduino Articles Web
     __________________________________________________________________

Ebook Arduino !

   couverture ebook
     __________________________________________________________________

   [INS: :INS]
   [INS: :INS]
    1. Arduino
    2. Faire communiquer son Arduino avec un appareil Android

Faire communiquer son Arduino avec un appareil Android

   Eskimon , le jeu. 24 août 2017 (commentaires)
   arduino tuto
   (BUTTON) Sommaire

   Cet article est un article "invité", rédigé par Sébastien (vous pourrez
   retrouver d’autres de ces réalisations à la fin de l’article).

   Bonjour à tous !

   Dans ce tutoriel porté sur Android et Arduino, nous allons connecter
   ces deux mondes géniaux (n’est-ce pas :D ?). Nous allons illustrer ce
   tutoriel par une application concrète ! A la fin, vous aurez une
   application Android avec deux boutons. Ces deux boutons permettront
   soit d’allumer une led connecté à l’Arduino, soit de l’éteindre. Pour
   cela, vous allez avoir besoin du matériel suivant :
    1. Un Arduino avec un shield Ethernet (ou wifi) ainsi qu’une led et sa
       résistance
    2. Un appareil sous Android
    3. Un ordinateur

   L’ordinateur jouera le rôle du serveur : il recevra les messages
   envoyés par l’application Android et les renverra ensuite à l’Arduino.
   Sachez qu’il est tout à fait possible d’envoyer des messages de
   l’Arduino à Android.

   Au niveau des compétences requises, des connaissances basiques en
   programmation Android et en Arduino suffiront !

   Si vous voulez voir le résultat que vous obtiendrez à la fin de ce
   tutoriel, je vous invite à vous rendre à la section "Résultat" où vous
   trouverez une vidéo !

Sommaire

     * Le protocole MQTT
     * Le broker MQTT : le nœud central
     * Connectez votre appareil Android au broker MQTT
          + Initialisez votre projet Android
          + Connectez vous au broker MQTT
          + Envoyez un message sur un topic
          + Recevoir un message
          + Créez votre application
     * Connectez votre Arduino au broker MQTT
          + Initialiser votre projet Arduino
          + Le câblage
          + Communiquez avec le protocole MQTT
               o Les includes nécessaires sont les suivants
               o Les variables nécessaires
               o Les fonctions connect et messageArrived
               o Finalisation du programme
     * Le résultat !

Le protocole MQTT

   Pour faire communiquer l’appareil Android avec l’Arduino, nous allons
   utiliser un langage commun : le protocole MQTT. L’avantage de ce
   protocole, c’est qu’il existe une librairie pour Android et une
   librairie pour Arduino. Ainsi nos deux mondes communiqueront de la même
   façon !

   Le protocole MQTT est un protocole de messagerie de type
   Publish-Subscribe basé sur le protocole TCP/IP (d’où la nécessité du
   shield Ethernet). Le protocole se décompose donc en trois grandes
   parties :
     * Les « publishers » : ils envoient un ou des message(s) sur un ou
       plusieurs « Topic »
     * Le « broker » MQTT : il fait le lien entre les « publishers » et
       les « subscribers »
     * Les « subscribers » : ils s’abonnent à un ou plusieurs « Topic ».
       Lorsque qu’un message est publié sur un topic, tous les subscribers
       de ce topic reçoivent le message

   Le broker MQTT permet de faire le lien entre le publisher (appareil
   Android) et le subscriber (Arduino). Dans notre exemple il n’y a qu’un
   seul publisher et qu’un seul subscriber, mais il pourrait y en avoir
   plus.

Le broker MQTT : le nœud central

   Le broker MQTT est le cœur de notre architecture (voir image
   ci-dessous). Il va permettre de faire communiquer l’appareil Android
   avec l’Arduino.
   Architecture Architecture

   Rassurez-vous, vous n’aurez pas besoin de développer votre propre
   broker, il en existe déjà. Mais si cela peut satisfaire votre soif de
   développement, ça fera un bon exercice !

   Celui que je vais utiliser tout au long de ce tuto, et que je vous
   conseille, est le broker « Mosquitto ». C’est un broker open source. Il
   suffit de télécharger l’exécutable sur le site officiel (
   https://mosquitto.org/ ) et de l’installer. Pensez à lire le fichier
   readme.txt qui se trouve à la racine du dossier d’installation, car il
   vous précise les dépendances à installer. Il vous faudra notamment
   installer pthread, openSSL (les liens vous sont fournis dans le readme)
   ainsi que l’ajout de quelques dll. Pour information, il vous faudra
   placer les dll dans le dossier de l’installation.

   Pour le lancer, une simple ligne de commande suffit. Dans mon cas ça
   donne (sachant que je suis sous Windows) :
"C:\Program Files (x86)\mosquitto\mosquitto.exe" -v -p 1883

   Il suffit donc de lancer l’exécutable qui a été installé, avec les
   options :
     * -v : mode verbose
     * -p 1883 : on va utiliser le port de l’ordinateur 1883

   Vous voilà avec un broker qui tourne et qui est prêt à recevoir et
   envoyer des messages !

Connectez votre appareil Android au broker MQTT

   On va à présent créer notre application Android ! Elle sera composée de
   deux boutons : un pour allumer la LED connectée à notre Arduino, et
   l’autre pour l’éteindre.

Initialisez votre projet Android

   On va dans un premier temps initialiser notre projet pour qu’il puisse
   communiquer avec le protocole MQTT. Pour cela, il faut :
     * Ajouter les dépendances dans le fichier gradle:
          + Au tout début de votre fichier gradle :

    repositories {
        maven { url 'https://repo.eclipse.org/content/repositories/paho-snapshot
s/' }
    }

- Dans la partie *dependencies* de votre fichier gradle:

    compile('org.eclipse.paho:org.eclipse.paho.android.service:1.0.3-SNAPSHOT')
{
        exclude module: 'support-v4'
    }
    compile 'org.eclipse.paho:org.eclipse.paho.client.mqttv3:1.0.3-SNAPSHOT'

     * Ajouter le service dans le Manifest entre les balises <Application>
       (si vous l’oubliez, vous n’aurez aucune erreur mais il vous sera
       impossible de vous connecter au broker et d’envoyer/recevoir des
       messages. Si je vous dis ça c’est que j’ai passé quelques heures à
       débogger mon application pour ce simple oublie) :

<service android:name="org.eclipse.paho.android.service.MqttService" ></service>

   Ajouter les permissions dans le Manifest (en dessous de la balise
   fermante : </application>) :
<uses-permission android:name="android.permission.WAKE_LOCK" />
<uses-permission android:name="android.permission.INTERNET" />
<uses-permission android:name="android.permission.ACCESS_NETWORK_STATE" />
<uses-permission android:name="android.permission.READ_PHONE_STATE" />

Connectez vous au broker MQTT

   Votre projet est enfin prêt ! Nous allons maintenant créer la méthode
   qui va nous permettre de nous connecter au broker. Voici son
   prototype :
public void connect(String address, String port)

     * Le premier argument address , correspond à l’adresse IP où se situe
       le broker. Pour connaitre l’adresse IP de votre ordinateur (sous
       windows), ouvrez une console et tapez la commande ipconfig et
       cherchez la ligne Adresse IPv4 . L’adresse est de la forme :
       192.168.1.xxx
     * Le second argument port correspond au port utilisé par votre broker
       MQTT.

   Dans la partie précédente, nous avons lancé notre broker MQTT sur le
   port 1883.

   Le corps de la méthode est assez simple. Je vous laisse le découvrir
   par vous même. Si la connexion est réussi, la méthode onSuccess est
   appelée, sinon la méthode onFailure sera appelée. Attention ! Vous
   aurez une erreur sur la dernière ligne, quand on appelle la méthode
   setCallback , ainsi que sur la ligne subscribe(topic); . Commentez les,
   nous y reviendrons plus tard.
private MqttAndroidClient client = null;

public void connect(String address, String port) {
    String clientId = MqttClient.generateClientId(); // génère un ID
    client = new MqttAndroidClient(getApplicationContext(), "tcp://" + address +
 ":" + port, clientId);

    try {
        IMqttToken token = client.connect(); // on tente de se connecter
        token.setActionCallback(new IMqttActionListener() {
            @Override
            public void onSuccess(IMqttToken asyncActionToken) {
                // Nous sommes connecté
                System.out.println("On est connecté !");
                subscribe(topic); // ligne à commenter pour le moment
            }

            @Override
            public void onFailure(IMqttToken asyncActionToken, Throwable excepti
on) {
                // Erreur de connexion : temps de connexion trop long ou problèm
e de pare-feu
                System.err.println("Echec de connection !");
            }
        });
    } catch (MqttException e) {
        e.printStackTrace();
    }

    client.setCallback(new MqttCallbackHandler()); // ligne à commenter pour le
moment
}

   Il ne vous reste plus qu’à appeler cette méthode dans la méthode
   onResume et vous serez connecté à votre broker ! Pensez à mettre votre
   propre adresse IP et à avoir le broker qui tourne sur votre ordinateur
   pour que la connexion puisse se faire.
@Override
public void onResume() {
    super.onResume();
    connect("192.168.1.17", "1883");
}

   Bien sûr, si vous vous connectez au broker dans la méthode onResume ,
   il faut penser à vous déconnecter dans la méthode onPause . Je ne
   détaille pas le code mais je vous le donne (il est assez simple) :
@Override
public void onPause() {
    super.onPause();
    disconnect();
}

public void disconnect() {
    if (client == null) {
        return;
    }
    try {
        IMqttToken disconToken = client.disconnect();
        disconToken.setActionCallback(new IMqttActionListener() {
            @Override
            public void onSuccess(IMqttToken asyncActionToken) {
                // Nous nous sommes correctement déconnecté
            }

            @Override
            public void onFailure(IMqttToken asyncActionToken,
                                  Throwable exception) {
                // Quelque chose c'est mal passé, mais on est probablement décon
necté malgré tout
            }
        });
    } catch (MqttException e) {
        e.printStackTrace();
    }
}

Envoyez un message sur un topic

   Pour envoyer un message, nous aurons besoin de deux choses : le topic
   sur lequel envoyer le message et le message lui-même. Pour ce faire,
   nous allons utiliser la méthode publish de notre client (de classe
   MqttAndroidClient ). Cette méthode prend en paramètre un topic et un
   message, ça tombe bien ! Pour notre exemple, nous allons publier un
   message sur le topic LEDArduino . Ainsi, tous les subscribers abonnés à
   ce topic receveront le message. Voici le code :
private final String topic = "LEDArduino";

public void sendMsg(String msg) {
    MqttMessage message = new MqttMessage();
    message.setPayload(msg.getBytes());
    try {
        client.publish(topic, message);
    } catch (MqttException e) {
        e.printStackTrace();
    }
}

Recevoir un message

   Pour notre exemple, notre application Android n’aura pas besoin de
   recevoir de message. Vous pouvez passer cette partie si vous le
   souhaitez. Sachez que c’est dans cette partie que nous allons pouvoir
   décommenter le code précédemment commenté dans notre méthode connect .

   Nous allons avoir besoin de deux choses pour recevoir des messages :
   souscrire à des topics et avoir un callback qui sera appelé
   automatiquement quand un message aura été reçu par l’application.

   Pour souscrire à un topic, nous allons faire appel à la méthode
   subscribe de notre client. Cette méthode prend deux arguments :
     * topic : le topic sur lequel on veut s’abonner
     * QOS (quality of service) : peut prendre trois valeurs :
          + 0 : Le message sera délivré qu’une seule fois, sans
            confirmation
          + 1 : Le message sera délivré au moins une fois, avec
            confirmation
          + 2 : Le message sera délivré exactement une fois, avec
            vérification en quatre étapes

   Voici ce que donne notre méthode subscribe . Une fois inséré dans votre
   code, vous pouvez décommenter le code qui l’appele dans la méthode
   connect .
private static int QOS = 0;

public void subscribe(final String topic) {
    try {
        IMqttToken subToken = client.subscribe(topic, QOS);
        subToken.setActionCallback(new IMqttActionListener() {
            @Override
            public void onSuccess(IMqttToken asyncActionToken) {
                // On a bien souscrit au topic
                System.out.println("onSuccess subscribe topic " + topic);
            }
            @Override
            public void onFailure(IMqttToken asyncActionToken,
                                  Throwable exception) {
                // La souscription n'a pas pu se faire, peut être que l'utilisat
eur n'a pas
                // l'autorisation de souscrire à ce topic
            }
        });
    } catch (MqttException e) {
        e.printStackTrace();
    } catch (Exception e) {
        e.printStackTrace();
    }
}

   Passons maintenant à la classe qui va permettre d’avoir nos callback !
   Elle doit implémenter l’interface MqttCallback . Une fois cette classe
   implémenter, vous allez pouvoir décommenter la méthode setCallback de
   la méthode connect . Dans notre exemple, la classe qui implémente cette
   interface se nomme MqttCallbackHandler . Je vous donne le code basique
   de la classe. Encore une fois, il est facile à comprendre :
import android.content.Context;

import org.eclipse.paho.client.mqttv3.IMqttDeliveryToken;
import org.eclipse.paho.client.mqttv3.MqttCallback;
import org.eclipse.paho.client.mqttv3.MqttMessage;

public class MqttCallbackHandler implements MqttCallback {

    /** {@link Context} for the application used to format and import external s
trings**/
    private Context context;
    /** Client handle to reference the connection that this handler is attached
to**/
    private String clientHandle;

    public MqttCallbackHandler()
    {
    }

    /**
     * @see org.eclipse.paho.client.mqttv3.MqttCallback#connectionLost(java.lang
.Throwable)
     */
    @Override
    public void connectionLost(Throwable cause) {
    }

    /**
     * @see org.eclipse.paho.client.mqttv3.MqttCallback#messageArrived(java.lang
.String, |org.eclipse.paho.client.mqttv3.MqttMessage)
     */
    @Override
    public void messageArrived(String topic, MqttMessage message) throws Excepti
on {
        String message_str = new String(message.getPayload(), "UTF-8");
        System.out.println("message arrivé str " + topic + " " + message_str);
    }

    /**
     * @see |org.eclipse.paho.client.mqttv3.MqttCallback#deliveryComplete(org.ec
lipse.paho.client.mqttv3.IMqttDeliveryTok|en)
     */
    @Override
    public void deliveryComplete(IMqttDeliveryToken token) {
        // Do nothing
    }
}

Créez votre application

   Nous avons maintenant toutes les bases qu’il nous faut pour créer notre
   application qui va communiquer avec notre Arduino. Il ne nous reste
   plus qu’à créer deux boutons : un bouton qui va permettre d’allumer la
   LED et un bouton pour l’éteindre. Si on clique sur le bouton qui doit
   allumer la LED, on va envoyer le message "ON" en appelant simplement la
   méthode sendMsg précédemment écrite. Si on clique sur le bouton pour
   éteindre la LED, on va envoyer le message "OFF". Simple non ? Je vous
   laisse le faire, et si besoin je vous donne mon code Java et XML :
public void AllumerLed(View v) {
    sendMsg("ON");
}
public void EteindreLed(View v) {
    sendMsg("OFF");
}

<?xml version="1.0" encoding="utf-8"?>
<RelativeLayout xmlns:android="http://schemas.android.com/apk/res/android"
    android:layout_width="match_parent"
    android:layout_height="match_parent">

    <LinearLayout
        android:layout_width="wrap_content"
        android:layout_height="wrap_content"
        android:layout_centerInParent="true"
        android:orientation="vertical">

        <Button
            android:layout_width="match_parent"
            android:layout_height="wrap_content"
            android:onClick="AllumerLed"
            android:text="Que la lumière soit !" />

        <Button
            android:layout_width="wrap_content"
            android:layout_height="wrap_content"
            android:onClick="EteindreLed"
            android:text="J'ai eu assez de lumière, merci !" />

    </LinearLayout>

</RelativeLayout>

   Une fois votre application terminée, elle devrait pouvoir se connecter
   au broker MQTT (pensez à lancer le broker sur votre ordinateur et à
   avoir votre appareil Android en réseau local avec votre ordinateur, par
   exemple en étant sur le même réseau wifi, et envoyer des messages.
   Lorsque vous cliquez sur un bouton sur Android, vous devriez voir dans
   la console que le broker MQTT a reçu un message (voir image
   ci-dessous).
   Console Mosquitto Console Mosquitto

   Le message reçu par le broker qui fait 2 bytes est le message "ON" et
   le message reçu qui fait 3 bytes est le message "OFF".

Connectez votre Arduino au broker MQTT

Initialiser votre projet Arduino

   Comme pour Android, il vous faut d’abord télécharger la librairie qui
   va vous permettre de communiquer avec le protocole MQTT. Rendez-vous à
   l’adresse suivante : https://eclipse.org/paho/clients/c/embedded/ et
   descendez jusqu’à la section Arduino. Vous allez avoir un lien pour
   télécharger la librairie. Pour rappel, pour ajouter la librairie dans
   Arduino (téléchargée au format ZIP), il vous faut cliquer (dans l’IDE
   d’Arduino) sur "Croquis->Inclure une bibliothèque->Ajouter la
   bibliothèque .ZIP".

   Une fois la librairie ajoutée, vous pouvez utiliser le protocole MQTT !
   Sachez qu’un exemple très complet vous est fourni avec la librairie.
   Vous le trouverez dans votre dossier
   Arduino->libraries->MQTTClient->example. Vous ne devriez pas avoir de
   mal à le lire car il reprends ce que nous avons vu avec Android
   (connect, subscribe, …), mais façon Arduino. Sachez d’ailleurs que je
   me suis grandement inspiré de cet exemple pour écrire le code que nous
   allons voir ensemble.

Le câblage

   Pour pouvoir utiliser le protocole MQTT sur votre Arduino, il vous faut
   un shield ethernet (ou wifi). En effet, le protocole MQTT étant basé
   sur le protocole TCP/IP, le shield ethernet (ou wifi) est requis. Il
   vous faudra également relier votre Arduino à votre réseau local en
   connectant le shield à votre box via un câble ethernet (ou via wifi).
   Une fois ceci fait, nous allons pouvoir brancher notre LED.

   Concernant la LED, je l’ai connecté au PIN 2 de l’Arduino, en série
   avec sa résistance (ça serait bête de la griller !). J’ai connecté
   l’anode sur le pin 5V de l’Arduino et la cathode sur le PIN 2. Ainsi,
   quand le PIN 2 sera à 0V, la LED s’allumera, et quand le PIN sera à 5V,
   la LED s’éteindra.

Communiquez avec le protocole MQTT

   Nous allons à présent passer au code pour connecter l’Arduino au broker
   MQTT et pour recevoir les messages. Je ne vous montrerai pas comment
   envoyer un message. Vous trouverez, si besoin, les quelques lignes qui
   le permettent dans la fonction loop() de l’exemple fourni avec la
   librairie.

Les includes nécessaires sont les suivants

#include <SPI.h>        // Pour communiquer avec le shield Ethernet
#include <Ethernet.h>   // Pour la partie Ethernet, evidemment !
#include <IPStack.h>    // Permet de gérer la couche IP
#include <Countdown.h>  // Timer utilisé par le protocole MQTT
#include <MQTTClient.h> // Permet de gérer le protocole MQTT

Les variables nécessaires

   Dont le pin de la LED et le topic auquel on veut souscrire (qui sera le
   même que celui sur lequel on envoie les messages côté Android) :
const int led = 2; // pin de la LED

EthernetClient c; // remplacez par un YunClient si vous utilisez Yun
IPStack ipstack(c);
MQTT::Client<IPStack, Countdown, 50, 1> client = MQTT::Client<IPStack, Countdown
, 50, 1>(ipstack);

byte mac[] = { 0x00, 0x11, 0x22, 0x33, 0x44, 0x55 };  // remplacer par l'adresse
 MAC de votre shield ethernet
const char* topic = "LEDArduino"; // le topic utilisé pour communiquer

Les fonctions connect et messageArrived

   Nous allons créer la fonction qui sera appelée quand un message sera
   reçu. On indiquera plus tard au client MQTT que c’est cette fonction
   qu’il faudra qu’il appelle quand on recevra un message appartenant au
   topic LEDArduino . C’est dans cette fonction que nous gérons l’allumage
   et l’extinction de la LED en fonction du message reçu.
void messageArrived(MQTT::MessageData& md)
{
  MQTT::Message &message = md.message;

  char* msg = (char*) message.payload; // on recupere le message
  msg[message.payloadlen] = 0; // indique la fin du char*

  if (strcmp(msg, "ON") == 0) // on a reçu le message "ON"
    digitalWrite(led, LOW);   // on allume la LED
  else if (strcmp(msg, "OFF") == 0) // on a reçu le message "OFF"
    digitalWrite(led, HIGH);        // on éteint la LED
}

   Maintenant il va falloir nous connecter au broker MQTT et souscrire au
   topic qui nous intéresse. Pour cela, nous allons créer la méthode
   connect , exactement de la même façon que nous avons fait pour Android.
   Pensez à remplacer la variable hostname par votre propre adresse IP
   (comme nous avons fait pour l’application Android).
void connect()
{
  char hostname[] = "192.168.1.17"; // IP où se trouve le broker MQTT
  int port = 1883; // port utilisé par le broker

  int rc = ipstack.connect(hostname, port);
  if (rc != 1)
  {
    Serial.print("rc from TCP connect is ");
    Serial.println(rc);
  }

  Serial.println("MQTT connecting");
  MQTTPacket_connectData data = MQTTPacket_connectData_initializer;
  data.MQTTVersion = 3;
  data.clientID.cstring = (char*)"arduino-id";
  rc = client.connect(data);
  if (rc != 0)
  {
    Serial.print("rc from MQTT connect is ");
    Serial.println(rc);
  }
  Serial.println("MQTT connected");

  rc = client.subscribe(topic, MQTT::QOS0, messageArrived);    // le client sous
crit au topic
  if (rc != 0)
  {
    Serial.print("rc from MQTT subscribe is ");
    Serial.println(rc);
  }
  Serial.println("MQTT subscribed");
}

Finalisation du programme

   Voilà ! Toutes nos fonctions sont prêtes, il ne nous reste plus qu’à
   implémenter les fonctions setup() et loop() ! Pensez à appeler
   client.yield(1000) dans la fonction loop() sinon votre Arduino ne
   recevra aucun message !
void setup() {
  pinMode(led, OUTPUT);
  digitalWrite(led, HIGH); // on initialise la LED en l'éteignant

  Serial.begin(9600);
  Ethernet.begin(mac);

  connect();
}

void loop() {
   if (!client.isConnected())
    connect();

   delay(500);
   client.yield(1000); // permet la reception des messages
}

Le résultat !

   Nous allons à présent voir le résultat tant attendu après un travail
   acharné entre le monde d’Android, d’Arduino et sans oublier le
   protocole MQTT géré par le broker qui tourne sur votre ordinateur.
     * Lancez le broker sur votre ordinateur
     * Lancez l’application Android (soyez sûr que vous ayez toujours la
       bonne adresse IP pour le broker MQTT et que vous soyez connecté en
       réseau local avec le broker)
     * Démarrez votre Arduino connecté à votre réseau local

   Amusez-vous à cliquer sur les boutons qui permettent d’allumer et
   d’éteindre la LED de votre Arduino !

   IFRAME: https://www.youtube.com/embed/JlRVDwtbOBI
     __________________________________________________________________

   Nous avons vu dans ce tutoriel comment faire communiquer un appareil
   Android avec un Arduino.

   Nous nous sommes contenté, pour illustrer ce tuto, d’envoyer un message
   à l’Arduino pour qu’il allume ou éteigne une LED. Mais les possibilités
   sont infinies ! Vous pouvez envoyer des messages d’un Arduino à un
   appareil Android. Vous pouvez aussi faire communiquer autant d’Arduino
   et d’appareil d’Android que vous le voulez simultanément !

   J’espère que ce tutoriel vous a plu ! Je vous laisse libre imagination
   pour intégrer la communication Android/Arduino dans vos futurs
   projets !

   Si vous êtes intéressé par le développement Android, vous pouvez me
   retrouver :
     * Sur ma chaîne YouTube
       https://www.youtube.com/channel/UClhbWbH9lTUmJDJCTJohbzQ
     * Ou sur ma page Facebook https://www.facebook.com/BeeApps

   À bientôt !

   Sébastien
     __________________________________________________________________

   Licence Tous droits réservés
     __________________________________________________________________

   [INS: :INS]
   Please enable JavaScript to view the comments powered by Disqus.

   © Eskimon - Blog propulsé par Pelican - Thème fait maison

   [p?c1=2&c2=20015427&cv=2.0&cj=1]

   Quantcast
