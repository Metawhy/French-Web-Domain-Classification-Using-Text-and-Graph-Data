     * Accueil
     * News
     * Liens
     * Nous contacter
     * Qui sommes nous ?
     * Offres d'emploi

   ____________________
   [EMBED]

Flash info

   "Si vous vivez chaque jour comme si c'était le dernier, un jour vous
   aurez probablement raison."

   Steve Jobs (1955-2011)

Menu principal

   Accueil
   News
   Découvrir PowerShell
   Articles / Tutoriaux
   Bibliothèque de scripts
   Aide mémoire
   Forum
   Liens
   FAQ
   Offres d'emploi

Identification

                              Nom d'utilisateur
                                 __________
                                Mot de passe
                                 __________
                           [ ] Se souvenir de moi
                                Se connecter
                            Mot de passe oublié ?
                   Pas encore de compte ? Enregistrez-vous

Commander notre livre

   livrepowershell_les_fondamentaux_du_langage.jpg Pour commander, c'est
   ici !

Commander notre livre

   livre_ps_avanc_recto_155x189.jpg Pour commander, c'est ici !

Derniers articles

     * PowerShell version 7 annoncée !
     * PowerShell Saturday Paris 2018
     * Trouver la version courante du Framework .NET
     * PowerShell 6 est en version finale !
     * PowerShell 6 est en RC et arrive en GA !

Articles les plus lus

     * Découvrir PowerShell
     * Les commandes
     * Présentation de Powershell
     * Les objets
     * Exécuter son premier script

   Accueil
   PowerShell version 7 annoncée !
   Écrit par Arnaud Petitjean [MVP]
   08-04-2019
     ps_v7.jpg

   La prochaine version de PowerShell sera la version 7 et non pas la 6.3
   !

   Telle est la révélation que vient de nous faire la Team PowerShell sur
   Twitter.


   Jusqu'à présent l'équipe PowerShell avait avec la version Core
   (comprendre les version 6.x) concentré ses efforts sur la partie Open
   Source ainsi que sur le portage de PowerShell sur des OS autres que
   Windows. A présent, nous apprenons que la v7 grâce au .Net Core 3 aura
   une couverture fonctionnelle encore plus proche de Windows PowerShell
   5.1. En effet, le challenge qu'a à relever l'équipe PowerShell est la
   transition de .Net Framework traditionnel à .Net Core; ce qui se
   traduit aujourd'hui à un certain nombres de modules PowerShell qui ne
   fonctionnent pas encore en version Core.

   Ces régressions vont donc s'amenuiser encore davantage en version 7,
   jusqu'à disparaître au point de couvrir complètement les
   fonctionnalités de PowerShell 5.1.  Dernière point, la version 7 fera
   partie de Windows dans les mois et années à venir...


   Pour plus d'informations, nous vous recommandons de lire l'article
   complet.

   PowerShell Saturday Paris 2018
   Écrit par Arnaud Petitjean [MVP]
   29-08-2018
   psugfr_logo.png

   Au cas où vous ne sachiez pas quoi faire Samedi 15 Septembre 2018,
   venez participer au PowerShell Saturday Paris 2018. Il s'agit d'une
   journée technique autour de votre langage de script favori où vous
   pourrez assister à nombreuses conférences données par des références
   internationales en la matière. Et en plus c'est gratuit !

                       -> Programme de la journée <-

                              -> Inscription <-

   Pour ma part j'animerai une session sur comment réaliser des sites Web
   et tableaux de bords dynamiques grâce PowerShell Universal Dashboard.

    L'évènement se déroulera dans les locaux de Cellenza au 156 boulevard
   Haussemann à Paris .



   Trouver la version courante du Framework .NET
   Écrit par Arnaud Petitjean [MVP]
   16-05-2018

   Bien que PowerShell possède la très utile variable $PSVersionTable qui
   nous donne des informations intéressantes sur PowerShell et sur le CLR,
   cela n'est pas suffisant pour déterminer de manière précise et fiable
   la version du Framework .NET installée.

   En effet, il faut savoir que le Framework .NET est un tout qui est
   composé de :
     * Du CLR qui est en fait la machine virtuelle qui compile à la volée
       et exécute le code .NET
     * D'un ensemble de classes regroupées dans des Assembly (sorte de
       packages).

   C'est l'ensemble de ces deux composants qui déterminent la version du
   Framework .NET. Celle-ci peut donc tout à fait changer uniquement car
   Microsoft a mis à jour les assembly sans toucher au CLR. Du coup,
   $PSVersionTable ne nous est pas d'une grande aide car elle ne retourne
   que la version du CLR.

   Il faut donc aller chercher du côté de la base de registres pour
   trouver notre information et voici la solution:

   Get-ChildItem 'HKLM:\SOFTWARE\Microsoft\NET Framework
   Setup\NDP\v4\Full\'
   Dernière mise à jour : ( 16-05-2018 )

   PowerShell 6 est en version finale !
   Écrit par Arnaud Petitjean [MVP]
   31-01-2018
   powershell_black_64.png

   La version 6 de PowerShell est enfin sortie en version finale ce 19
   Janvier 2018. Avec elle, exit "Windows PowerShell" et place à
   "PowerShell" tout court !  Wink

   Bien que ce changement de nom puisse sembler anodin, il n'en est rien !
   Nous sommes à une période charnière de l'histoire de notre shell
   préféré. En effet, dans cette version, Microsoft, a adossé PowerShell
   au .NET Core et non plus au Framework .NET. Ce qui est un grand
   changement, car non seulement PowerShell (et .NET Core) est open
   source, ce qui fait que :
    1. Vous pouvez contribuer au développement de PowerShell et accéder
       librement à son code source,
    2. PowerShell est multiplateforme et installable sur : Windows, Linux,
       MacOS, et même RaspBerry Pi !

   Whahh ! Que de changements !

   Petit bémol cependant, car ce changement d'architecture peut avoir des
   impacts sur vos anciens scripts. Vous allez devoir les tester car
   certaines fonctionnalités peuvent s'avérer manquantes étant donné que
   le .NET Core n'a pas encore toute la couverture fonctionnelle de son
   ainé.

   Autre bonne nouvelle : vous pouvez installer PowerShell 6 à côté d'une
   version antérieure de Windows PowerShell sans rien casser. En effet,
   PowerShell 6 s'installe dans un répertoire indépendant du système
   d'exploitation et il embarque .NET Core. Les prérequis d'installation
   sont donc minimalistes !

   Allez, un, deux, trois c'est parti !

   Le téléchargement c'est par ici :
   https://github.com/PowerShell/PowerShell/releases


   Dernière mise à jour : ( 31-01-2018 )

   PowerShell 6 est en RC et arrive en GA !
   Écrit par Arnaud Petitjean [MVP]
   01-12-2017

   Ca y est elle est presque là la version 6 ! La voici à présent en
   Release Candidate.

   La Team PowerShell nous apprend sur son Blog que la version finale dite
   "GA" pour "General Availability" (qui remplace le terme RTM) est prévue
   pour le 10 Janvier 2018. On apprend également que ce qui différencie la
   version RC de la GA c'est uniquement la correction de quelques bugs
   mineurs. Il n'y aura donc pas d'ajout de nouvelles fonctionnalités dans
   la GA par rapport à la RC.

   Cerise sur le gateau, dans cette release PowerShell sur Raspberry
   (Raspbian) est enfin fonctionnel et supporté !! Bref, comme d'habitude
   c'est que du bonheur !  Laughing

   => PowerShell Team Blog : PowerShell Core 6 Release Candidate

   => GitHub : Lien de téléchargement et release notes

   => PowerShell pour Raspbian Stretch
     powershell_black_64.png
   Dernière mise à jour : ( 01-12-2017 )

   Mission DevOps PowerShell (CDD 3 mois min)
   Écrit par Arnaud Petitjean [MVP]
   27-09-2017
   candidat_emploi_travail_r.jpg

   Poste basé à Genève.

   DESCRIPTION DU POSTE :
   Pour le département Infrastructure Technologique de notre client nous
   recherchons une personne au fort potentiel technique et disposant dune
   excellente capacité danalyse pour contribuer à la réalisation de
   différents outils et modules Powershell.
   VOTRE MISSION :
   Réaliser des scripts ou modules Powershell selon les spécifications et
   conformément aux conventions en vigueur
   Réaliser et maintenir des recettes DSC (Desired State Configuration)
   Contribuer à la mise en place de JEA (Just Enough Administration) au
   sein du client
   Comprendre et connaître les standards en vigueur chez le client.
   Durée de la mission : 3 mois renouvelables
   PROFIL RECHERCHÉ :
   Etudes supérieures en informatique
   Maîtrise de lenvironnement technique suivant : scripting (Powershell),
   systèmes Windows, sécurité, réseaux
   Expérience en automatisation appréciée (type Puppet, DSC)
   Expérience professionnelle en tant que développeur (minimum 3 ans)
   Vision globale et analytique, curiosité intellectuelle, gestion des
   priorités, esprit DEVOPS.
   Responsable, rigoureux, polyvalent, flexible et disposant de bonnes
   capacités relationnelles.
   Si vous vous reconnaissez dans cette description, nous nous réjouissons
   de recevoir votre dossier, qui sera traité avec la plus stricte
   confidentialité.

   Contact : Cet e-mail est protégé contre les robots collecteurs de
   mails, votre navigateur doit accepter le Javascript pour le voir
   Tel. : +41 (0)22 304 15 00 / +41 (0)79 681 75 61
   Dernière mise à jour : ( 27-09-2017 )

   Module pour créer des fichiers de logs
   Écrit par Arnaud Petitjean [MVP]
   14-03-2017

   Il est souvent nécessaire lorsque l'on fait un script d'administration
   système de générer des fichiers de logs. Le problème c'est que
   généralement cela passe en second plan par manque de temps. Et
   lorsqu'on a une petite fonction de logs, elle n'est bien souvent pas
   partagées avec ses collègues et cela se traduit par des formats de logs
   très diversifiés au sein de l'entreprise, ce qui est dommage. Et ce
   d'autant plus à l'heure où Splunk est de plus en plus répandu. Ceci
   étant vous allez me dire qu'il n'est pas difficile de configurer Splunk
   pour qu'il s'adapte à tous les différents formats de fichiers, bref...

   Le module EZLog, comme son nom l'indique, vous offre la possibilité de
   créer très facilement et rapidement des fichiers logs bien structurés
   et horodatés. Il vous offre même la possibilité d'afficher (ou non) les
   logs dans la console en même temps qu'ils sont écrits sur disque avec -
   excusez du peu - de la coloration syntaxique en fonction des logs
   écrits (Info, Warning, Erreur). En plus des logs vous aurez droit à un
   bel entête avec plein de méta-données utiles comme le nom et le chemin
   du script, le nom de la machine et du compte de l'utilisateur exécutant
   le script. Et comme si cela ne suffisait pas, vous connaîtrez grâce au
   "pied de page" le temps d'exécution total du script.

   Alors ne cherchez plus, c'est EZLog qu'il vous faut ! Il est dans la
   PowerShell Gallery , donc pour l'installer c'est facile :

   PS > Install-Module EZLog

   N'hésitez pas à venir en discuter dans le fil de discussion prévu à cet
   effet dans le forum.
     ezlog.png
   Dernière mise à jour : ( 14-03-2017 )

   PowerShell fête ses 10 ans !
   Écrit par Arnaud Petitjean [MVP]
   14-11-2016
     ps_10th_anniversary.png

   PowerShell fête ses 10 bougies aujourd'hui, le 14 Novembre 2016 !

   Rejoignez l'équipe PowerShell pour fêter cet évènement en ligne à
   partir de 17h ce jour (heure française). Durant toute la journée, des
   sessions au contenu exclusif auront lieu en live sur Channel 9 .

   Annonce de l'évènement sur le Blog de la PowerShell Team
   Dernière mise à jour : ( 14-11-2016 )

   Limite des 260 caractères dans un path enfin franchie !
   Écrit par Arnaud Petitjean [MVP]
   26-08-2016

   La limitation qui empêchait Windows d'accèder à des fichiers situés
   dans des arborescences profondes de plus de 260 caractères (nom du
   fichier inclus) vient enfin d'être dépassée !

   Après plus de 15 ans d'attente le problème a été corrigé dans la toute
   dernière release du Framework .Net (4.6.2). Ceci étant, afin d'activer
   cette "nouvelle fonctionnalité" il faut aller modifier un paramètre
   dans gpedit.msc comme indiqué dans ce billet : Microsoft removes 260
   character limit for NTFS Path in new Windows 10 Insider Preview

   Voici une petite ligne de commande PowerShell "quick & dirty" qui vous
   permettra de vérifier si votre système a été correctement configuré :

   PS > 1..150 | foreach { $dir = "Long nom de répertoire {0:d2}" -f $_;
   md $dir; cd $dir}
   Celle-ci crée 150 dossiers imbriqués les uns dans les autres. Si votre
   machine est tributaire de cette limitation vous devriez avoir des
   erreurs dès le 10ième répertoire créé environ. Si vous n'obtenez pas
   d'erreur c'est que le problème est réglé Smile .


   J'ai testé avec succès la manip' sur un Windows 10 Anniversary.
   Celui-ci disposant du WMF 5.1 et donc de PowerShell 5.1 à forciori.

   Comme d'habitude, pour vérifier la version de PowerShell installée tout
   est dans la variable $PSVersionTable.

   Voici le résultat sur ma machine :

   PS > $PSVersionTable

   Name                           Value
   ----                           -----
   PSVersion                      5.1.14393.0
   PSEdition                      Desktop
   PSCompatibleVersions           {1.0, 2.0, 3.0, 4.0...}
   BuildVersion                   10.0.14393.0
   CLRVersion                     4.0.30319.42000
   WSManStackVersion              3.0
   PSRemotingProtocolVersion      2.3
   SerializationVersion           1.1.0.1


     folders.jpg
   Dernière mise à jour : ( 23-08-2016 )

   Suite...
     * Powershell est Open Source et disponible sur MacOS et Linux !

   << Début < Précédente 1 2 3 4 5 6 7 8 9 10 Suivante > Fin >>
   Résultats 1 - 10 sur 198

Réseaux sociaux

   Suivez nous sur     twitter

Qui est en ligne

   Il y a actuellement 4 invités en ligne

Syndication

   Cliquez sur l'icone de votre choix, puis copiez/collez l'URL dans votre
                              lecteur de flux.

                                   RSS 1.0

                                   RSS 2.0

                                  ATOM 0.3

                                    OPML

   mvp_logo2.png

                      © 2019 PowerShell-Scripting.com
