   #RSS 2.0 Atom 1.0

     * Skip to content
     * Skip to main navigation
     * Skip to first column
     * Skip to second column


DSL 2011: IFIP Working Conference on Domain-Specific Languages

   6â€“8 September 2011, Bordeaux, France
     * Increase font size
     * Default font size
     * Decrease font size

   DSL 2011: IFIP Working Conference on Domain-Specific Languages

Call for papers

IFIP Working Conference on Domain-Specific Languages
6â€“8 September 2011, Bordeaux, France

   Domain-specific languages have long been a popular way to shorten the
   distance from ideas to products in software engineering. On one hand,
   the interface of a DSL lets domain experts express high-level concepts
   succinctly in familiar notation, such as grammars for text or scripts
   for animation, and often provides guarantees and tools that take
   advantage of the specifics of the domain to help write and maintain
   these particular programs. On the other hand, the implementation of a
   DSL can automate many tasks traditionally performed by a few experts to
   turn a specification into an executable, thus making this expertise
   available widely. Overall, a DSL thus mediates a collaboration between
   its users and implementers that results in software that is more
   usable, more portable, more reliable, and more understandable.

   These benefits of DSLs have been delivered in domains old and new, such
   as signal processing, data mining, and Web scripting. Widely known
   examples of DSLs include Matlab, Verilog, SQL, LINQ, HTML, OpenGL,
   Macromedia Director, Mathematica, Maple, AutoLisp/AutoCAD, XSLT, RPM,
   Make, lex/yacc, LaTeX, PostScript, and Excel. Despite these successes,
   the adoption of DSLs have been stunted by the lack of general tools and
   principles for developing, compiling, and verifying domain-specific
   programs. General support for building and using DSLs is thus urgently
   needed. Languages that straddle the line between the domain-specific
   and the general-purpose, such as Perl, Tcl/Tk, and JavaScript, suggest
   that such support be based on modern notions of language design and
   software engineering. The goal of this conference, following the last
   one in 2009, is to explore how present and future DSLs can fruitfully
   draw from and potentially enrich these notions.

   We seek research papers on the theory and practice of DSLs, including
   but not limited to the following topics.
     * Foundations, including semantics, formal methods, type theory, and
       complexity theory
     * Language design, including concrete syntax, semantics, and types
     * Software engineering, including domain analysis, software design,
       and round-trip engineering
     * Modularity and composability of DSLs
     * Software processes, including metrics for software and language
       evaluation
     * Implementation, including parsing, compiling, program generation,
       program analysis, transformation, optimization, and parallelization
     * Reverse engineering, re-engineering, design discovery, automated
       refactoring
     * Hardware/software codesign
     * Programming environments and tools, including visual languages,
       debuggers, testing, and verification
     * Teaching DSLs and the use of DSLs in teaching
     * Case studies in any domain, especially the general lessons they
       provide for DSL design and implementation

   The conference will include a visit to the city of Bordeaux, a tour and
   tasting at the wine museum and cellar, and a banquet at La Belle
   Ã‰poque.

Instructions for authors

   Papers will be judged on the depth of their insight and the extent to
   which they translate specific experience into general lessons for
   software engineers and DSL designers and implementers. Where
   appropriate, papers should refer to actual languages, tools, and
   techniques, provide pointers to full definitions, proofs, and
   implementations, and include empirical results.

   Proceedings will be published in Electronic Proceedings in Theoretical
   Computer Science (http://info.eptcs.org/). Submissions and final
   manuscripts should be at most 25 pages in EPTCS format.

   Please submit your abstract and paper using EasyChair at
   https://www.easychair.org/conferences/?conf=dsl2011

Important dates

     * 2011-04-25: Abstracts due (extended deadline)
     * 2011-05-02: Submissions due (extended deadline)
     * 2011-06-10: Authors notified of decisions
     * 2011-07-11: Final manuscripts due
     * 2011-09-06/2011-09-08: Conference

Program committee

     * Emilie Balland (INRIA)
     * Olaf Chitil (University of Kent)
     * ZoÃ© Drey (IRIT)
     * Nate Foster (Cornell University)
     * Mayer Goldberg (Ben-Gurion University)
     * Shan Shan Huang (LogicBlox)
     * Sam Kamin (University of Illinois at Urbana-Champaign)
     * Jerzy Karczmarczuk (University of Caen)
     * Jan Midtgaard (Aarhus University)
     * Keiko Nakata (Tallinn University of Technology)
     * Klaus Ostermann (University of Marburg)
     * Jeremy Siek (University of Colorado at Boulder)
     * Tony Sloane (Macquarie University)
     * Josef Svenningsson (Chalmers University of Technology)
     * Paul Tarau (University of North Texas)
     * Dana N. Xu (INRIA)

Organizers

   Local chair: Emilie Balland (INRIA)
   Program chairs: Olivier Danvy (Aarhus University), Chung-chieh Shan
   (Rutgers University)

DSL 2011

     * Call For Paper
     * Distilled Tutorials
     * Programme
     * Invited Speakers
     * Registration
     * Social Events
     * Venue
     * Accomodation
     * Partners

   [ifip.jpg] [inria.jpg] [labri.jpg] [aquitaine.jpg] [ipb.jpg] [cub.png]

   Photo taken by Olivier Aumage (under CC-BY-SA-2.0-fr)
    Joomla! - le portail dynamique et systÃ¨me de gestion de contenu
   https://dsl2011.bordeaux.inria.fr/index.php?option=com_content&view=fro
   ntpage Mon, 26 Aug 2013 07:46:11 +0000 Joomla! 1.5 - Open Source
   Content Management en-gb
   https://dsl2011.bordeaux.inria.fr/index.php?option=com_content&view=art
   icle&id=1:description
   https://dsl2011.bordeaux.inria.fr/index.php?option=com_content&view=art
   icle&id=1:description <h1>IFIP Working Conference on Domain-Specific
   Languages<br />6“8 September 2011, Bordeaux, France</h1>
   <p>Domain-specific languages have long been a popular way to shorten
   the distance from ideas to products in software engineering. On one
   hand, the interface of a DSL lets domain experts express high-level
   concepts succinctly in familiar notation, such as grammars for text or
   scripts for animation, and often provides guarantees and tools that
   take advantage of the specifics of the domain to help write and
   maintain these particular programs. On the other hand, the
   implementation of a DSL can automate many tasks traditionally performed
   by a few experts to turn a specification into an executable, thus
   making this expertise available widely. Overall, a DSL thus mediates a
   collaboration between its users and implementers that results in
   software that is more usable, more portable, more reliable, and more
   understandable.</p> <p>These benefits of DSLs have been delivered in
   domains old and new, such as signal processing, data mining, and Web
   scripting. Widely known examples of DSLs include Matlab, Verilog, SQL,
   LINQ, HTML, OpenGL, Macromedia Director, Mathematica, Maple,
   AutoLisp/AutoCAD, XSLT, RPM, Make, lex/yacc, LaTeX, PostScript, and
   Excel. Despite these successes, the adoption of DSLs have been stunted
   by the lack of general tools and principles for developing, compiling,
   and verifying domain-specific programs. General support for building
   and using DSLs is thus urgently needed. Languages that straddle the
   line between the domain-specific and the general-purpose, such as Perl,
   Tcl/Tk, and JavaScript, suggest that such support be based on modern
   notions of language design and software engineering. The goal of this
   conference, following the last one in 2009, is to explore how present
   and future DSLs can fruitfully draw from and potentially enrich these
   notions.</p> <p>We seek research papers on the theory and practice of
   DSLs, including but not limited to the following topics.</p> <ul>
   <li>Foundations, including semantics, formal methods, type theory, and
   complexity theory</li> <li>Language design, including concrete syntax,
   semantics, and types</li> <li>Software engineering, including domain
   analysis, software design, and round-trip engineering </li>
   <li>Modularity and composability of DSLs </li> <li>Software processes,
   including metrics for software and language evaluation </li>
   <li>Implementation, including parsing, compiling, program generation,
   program analysis, transformation, optimization, and
   parallelization</li> <li> Reverse engineering, re-engineering, design
   discovery, automated refactoring</li> <li> Hardware/software codesign
   </li> <li>Programming environments and tools, including visual
   languages, debuggers, testing, and verification </li> <li>Teaching DSLs
   and the use of DSLs in teaching </li> <li>Case studies in any domain,
   especially the general lessons they provide for DSL design and
   implementation</li> </ul> <p>The conference will include a visit to the
   city of Bordeaux, a tour and tasting at the wine museum and cellar, and
   a banquet at La Belle Époque.</p> <h1>Instructions for authors</h1>
   <p>Papers will be judged on the depth of their insight and the extent
   to which they translate specific experience into general lessons for
   software engineers and DSL designers and implementers. Where
   appropriate, papers should refer to actual languages, tools, and
   techniques, provide pointers to full definitions, proofs, and
   implementations, and include empirical results.</p> <p>Proceedings will
   be published in Electronic Proceedings in Theoretical Computer Science
   (<a href="http://info.eptcs.org/">http://info.eptcs.org/</a>).
   Submissions and final manuscripts should be at most 25 pages in EPTCS
   format.</p> <p>Please submit your abstract and paper using EasyChair at
   <span id="OBJ_PREFIX_DWT84"><span id="OBJ_PREFIX_DWT85"><a
   href="https://www.easychair.org/conferences/?conf=dsl2011"
   target="_blank">https://www.easychair.org/conferences/?conf=dsl2011</a>
   </span></span></p> <h1>Important dates</h1> <ul> <li>2011-04-25:
   Abstracts due<strong> (extended deadline)</strong></li> <li>2011-05-02:
   Submissions due<strong> (extended deadline)</strong></li>
   <li>2011-06-10: Authors notified of decisions</li> <li>2011-07-11:
   Final manuscripts due</li> <li>2011-09-06/2011-09-08: Conference</li>
   </ul> <h1>Program committee</h1> <ul> <li>Emilie Balland (INRIA)</li>
   <li>Olaf Chitil (University of Kent)</li> <li>Zoé Drey (IRIT)</li>
   <li>Nate Foster (Cornell University)</li> <li>Mayer Goldberg
   (Ben-Gurion University)</li> <li>Shan Shan Huang (LogicBlox)</li>
   <li>Sam Kamin (University of Illinois at Urbana-Champaign)</li>
   <li>Jerzy Karczmarczuk (University of Caen)</li> <li>Jan Midtgaard
   (Aarhus University)</li> <li>Keiko Nakata (Tallinn University of
   Technology)</li> <li>Klaus Ostermann (University of Marburg)</li>
   <li>Jeremy Siek (University of Colorado at Boulder)</li> <li>Tony
   Sloane (Macquarie University)</li> <li>Josef Svenningsson (Chalmers
   University of Technology)</li> <li>Paul Tarau (University of North
   Texas)</li> <li>Dana N. Xu (INRIA)</li> </ul> <h1>Organizers</h1>
   <p>Local chair: Emilie Balland (INRIA)<br />Program chairs: Olivier
   Danvy (Aarhus University), Chung-chieh Shan (Rutgers University)</p>
   ccshan@cs.rutgers.edu (shan) frontpage Thu, 17 Feb 2011 07:51:23 +0000
    Joomla! - le portail dynamique et systÃ¨me de gestion de contenu
   #alternate https://dsl2011.bordeaux.inria.fr/index.php
   2013-08-26T07:46:12Z Joomla! 1.5 - Open Source Content Management
   alternate 2011-02-17T07:51:23Z 2011-02-17T07:51:23Z
   https://dsl2011.bordeaux.inria.fr/index.php?option=com_content&view=art
   icle&id=1:description shan ccshan@cs.rutgers.edu <h1>IFIP Working
   Conference on Domain-Specific Languages<br />6â€“8 September 2011,
   Bordeaux, France</h1> <p>Domain-specific languages have long been a
   popular way to shorten the distance from ideas to products in software
   engineering. On one hand, the interface of a DSL lets domain experts
   express high-level concepts succinctly in familiar notation, such as
   grammars for text or scripts for animation, and often provides
   guarantees and tools that take advantage of the specifics of the domain
   to help write and maintain these particular programs. On the other
   hand, the implementation of a DSL can automate many tasks traditionally
   performed by a few experts to turn a specification into an executable,
   thus making this expertise available widely. Overall, a DSL thus
   mediates a collaboration between its users and implementers that
   results in software that is more usable, more portable, more reliable,
   and more understandable.</p> <p>These benefits of DSLs have been
   delivered in domains old and new, such as signal processing, data
   mining, and Web scripting. Widely known examples of DSLs include
   Matlab, Verilog, SQL, LINQ, HTML, OpenGL, Macromedia Director,
   Mathematica, Maple, AutoLisp/AutoCAD, XSLT, RPM, Make, lex/yacc, LaTeX,
   PostScript, and Excel. Despite these successes, the adoption of DSLs
   have been stunted by the lack of general tools and principles for
   developing, compiling, and verifying domain-specific programs. General
   support for building and using DSLs is thus urgently needed. Languages
   that straddle the line between the domain-specific and the
   general-purpose, such as Perl, Tcl/Tk, and JavaScript, suggest that
   such support be based on modern notions of language design and software
   engineering. The goal of this conference, following the last one in
   2009, is to explore how present and future DSLs can fruitfully draw
   from and potentially enrich these notions.</p> <p>We seek research
   papers on the theory and practice of DSLs, including but not limited to
   the following topics.</p> <ul> <li>Foundations, including semantics,
   formal methods, type theory, and complexity theory</li> <li>Language
   design, including concrete syntax, semantics, and types</li>
   <li>Software engineering, including domain analysis, software design,
   and round-trip engineering </li> <li>Modularity and composability of
   DSLs </li> <li>Software processes, including metrics for software and
   language evaluation </li> <li>Implementation, including parsing,
   compiling, program generation, program analysis, transformation,
   optimization, and parallelization</li> <li> Reverse engineering,
   re-engineering, design discovery, automated refactoring</li> <li>
   Hardware/software codesign </li> <li>Programming environments and
   tools, including visual languages, debuggers, testing, and verification
   </li> <li>Teaching DSLs and the use of DSLs in teaching </li> <li>Case
   studies in any domain, especially the general lessons they provide for
   DSL design and implementation</li> </ul> <p>The conference will include
   a visit to the city of Bordeaux, a tour and tasting at the wine museum
   and cellar, and a banquet at La Belle Ã‰poque.</p> <h1>Instructions for
   authors</h1> <p>Papers will be judged on the depth of their insight and
   the extent to which they translate specific experience into general
   lessons for software engineers and DSL designers and implementers.
   Where appropriate, papers should refer to actual languages, tools, and
   techniques, provide pointers to full definitions, proofs, and
   implementations, and include empirical results.</p> <p>Proceedings will
   be published in Electronic Proceedings in Theoretical Computer Science
   (<a href="http://info.eptcs.org/">http://info.eptcs.org/</a>).
   Submissions and final manuscripts should be at most 25 pages in EPTCS
   format.</p> <p>Please submit your abstract and paper using EasyChair at
   <span id="OBJ_PREFIX_DWT84"><span id="OBJ_PREFIX_DWT85"><a
   href="https://www.easychair.org/conferences/?conf=dsl2011"
   target="_blank">https://www.easychair.org/conferences/?conf=dsl2011</a>
   </span></span></p> <h1>Important dates</h1> <ul> <li>2011-04-25:
   Abstracts due<strong> (extended deadline)</strong></li> <li>2011-05-02:
   Submissions due<strong> (extended deadline)</strong></li>
   <li>2011-06-10: Authors notified of decisions</li> <li>2011-07-11:
   Final manuscripts due</li> <li>2011-09-06/2011-09-08: Conference</li>
   </ul> <h1>Program committee</h1> <ul> <li>Emilie Balland (INRIA)</li>
   <li>Olaf Chitil (University of Kent)</li> <li>ZoÃ© Drey (IRIT)</li>
   <li>Nate Foster (Cornell University)</li> <li>Mayer Goldberg
   (Ben-Gurion University)</li> <li>Shan Shan Huang (LogicBlox)</li>
   <li>Sam Kamin (University of Illinois at Urbana-Champaign)</li>
   <li>Jerzy Karczmarczuk (University of Caen)</li> <li>Jan Midtgaard
   (Aarhus University)</li> <li>Keiko Nakata (Tallinn University of
   Technology)</li> <li>Klaus Ostermann (University of Marburg)</li>
   <li>Jeremy Siek (University of Colorado at Boulder)</li> <li>Tony
   Sloane (Macquarie University)</li> <li>Josef Svenningsson (Chalmers
   University of Technology)</li> <li>Paul Tarau (University of North
   Texas)</li> <li>Dana N. Xu (INRIA)</li> </ul> <h1>Organizers</h1>
   <p>Local chair: Emilie Balland (INRIA)<br />Program chairs: Olivier
   Danvy (Aarhus University), Chung-chieh Shan (Rutgers University)</p>
   <h1>IFIP Working Conference on Domain-Specific Languages<br />6â€“8
   September 2011, Bordeaux, France</h1> <p>Domain-specific languages have
   long been a popular way to shorten the distance from ideas to products
   in software engineering. On one hand, the interface of a DSL lets
   domain experts express high-level concepts succinctly in familiar
   notation, such as grammars for text or scripts for animation, and often
   provides guarantees and tools that take advantage of the specifics of
   the domain to help write and maintain these particular programs. On the
   other hand, the implementation of a DSL can automate many tasks
   traditionally performed by a few experts to turn a specification into
   an executable, thus making this expertise available widely. Overall, a
   DSL thus mediates a collaboration between its users and implementers
   that results in software that is more usable, more portable, more
   reliable, and more understandable.</p> <p>These benefits of DSLs have
   been delivered in domains old and new, such as signal processing, data
   mining, and Web scripting. Widely known examples of DSLs include
   Matlab, Verilog, SQL, LINQ, HTML, OpenGL, Macromedia Director,
   Mathematica, Maple, AutoLisp/AutoCAD, XSLT, RPM, Make, lex/yacc, LaTeX,
   PostScript, and Excel. Despite these successes, the adoption of DSLs
   have been stunted by the lack of general tools and principles for
   developing, compiling, and verifying domain-specific programs. General
   support for building and using DSLs is thus urgently needed. Languages
   that straddle the line between the domain-specific and the
   general-purpose, such as Perl, Tcl/Tk, and JavaScript, suggest that
   such support be based on modern notions of language design and software
   engineering. The goal of this conference, following the last one in
   2009, is to explore how present and future DSLs can fruitfully draw
   from and potentially enrich these notions.</p> <p>We seek research
   papers on the theory and practice of DSLs, including but not limited to
   the following topics.</p> <ul> <li>Foundations, including semantics,
   formal methods, type theory, and complexity theory</li> <li>Language
   design, including concrete syntax, semantics, and types</li>
   <li>Software engineering, including domain analysis, software design,
   and round-trip engineering </li> <li>Modularity and composability of
   DSLs </li> <li>Software processes, including metrics for software and
   language evaluation </li> <li>Implementation, including parsing,
   compiling, program generation, program analysis, transformation,
   optimization, and parallelization</li> <li> Reverse engineering,
   re-engineering, design discovery, automated refactoring</li> <li>
   Hardware/software codesign </li> <li>Programming environments and
   tools, including visual languages, debuggers, testing, and verification
   </li> <li>Teaching DSLs and the use of DSLs in teaching </li> <li>Case
   studies in any domain, especially the general lessons they provide for
   DSL design and implementation</li> </ul> <p>The conference will include
   a visit to the city of Bordeaux, a tour and tasting at the wine museum
   and cellar, and a banquet at La Belle Ã‰poque.</p> <h1>Instructions for
   authors</h1> <p>Papers will be judged on the depth of their insight and
   the extent to which they translate specific experience into general
   lessons for software engineers and DSL designers and implementers.
   Where appropriate, papers should refer to actual languages, tools, and
   techniques, provide pointers to full definitions, proofs, and
   implementations, and include empirical results.</p> <p>Proceedings will
   be published in Electronic Proceedings in Theoretical Computer Science
   (<a href="http://info.eptcs.org/">http://info.eptcs.org/</a>).
   Submissions and final manuscripts should be at most 25 pages in EPTCS
   format.</p> <p>Please submit your abstract and paper using EasyChair at
   <span id="OBJ_PREFIX_DWT84"><span id="OBJ_PREFIX_DWT85"><a
   href="https://www.easychair.org/conferences/?conf=dsl2011"
   target="_blank">https://www.easychair.org/conferences/?conf=dsl2011</a>
   </span></span></p> <h1>Important dates</h1> <ul> <li>2011-04-25:
   Abstracts due<strong> (extended deadline)</strong></li> <li>2011-05-02:
   Submissions due<strong> (extended deadline)</strong></li>
   <li>2011-06-10: Authors notified of decisions</li> <li>2011-07-11:
   Final manuscripts due</li> <li>2011-09-06/2011-09-08: Conference</li>
   </ul> <h1>Program committee</h1> <ul> <li>Emilie Balland (INRIA)</li>
   <li>Olaf Chitil (University of Kent)</li> <li>ZoÃ© Drey (IRIT)</li>
   <li>Nate Foster (Cornell University)</li> <li>Mayer Goldberg
   (Ben-Gurion University)</li> <li>Shan Shan Huang (LogicBlox)</li>
   <li>Sam Kamin (University of Illinois at Urbana-Champaign)</li>
   <li>Jerzy Karczmarczuk (University of Caen)</li> <li>Jan Midtgaard
   (Aarhus University)</li> <li>Keiko Nakata (Tallinn University of
   Technology)</li> <li>Klaus Ostermann (University of Marburg)</li>
   <li>Jeremy Siek (University of Colorado at Boulder)</li> <li>Tony
   Sloane (Macquarie University)</li> <li>Josef Svenningsson (Chalmers
   University of Technology)</li> <li>Paul Tarau (University of North
   Texas)</li> <li>Dana N. Xu (INRIA)</li> </ul> <h1>Organizers</h1>
   <p>Local chair: Emilie Balland (INRIA)<br />Program chairs: Olivier
   Danvy (Aarhus University), Chung-chieh Shan (Rutgers University)</p>
